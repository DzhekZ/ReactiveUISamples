// ------------------------------------------------------------------------------
// DO NOT MODIFY THIS CLASS - AutoGenerated Code
//    Any changes made to this code will be lost the next time this 
//    code is regenerated.
// 
//    Generated at: 2/28/2012 4:54:03 PM
//    DevForce version: 6.1.5.0
//    Template version: 2.1.4
// ------------------------------------------------------------------------------
using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using IbEm   = IdeaBlade.EntityModel;
using IbCore = IdeaBlade.Core;
using IbVal  = IdeaBlade.Validation;

[module: IbCore.IdeaBladeLicense("JzQz6K9ut7dDKB6BPvGVlfvvM7eVIuiqXepV2zs47OofB33R+Sv14iR+LHENCl2g")]

namespace AddEditDeleteProspects { 

  #region TestsEntities

  /// <summary>
  /// The domain-specific EntityManager for your domain model.
  /// </summary>
  public partial class TestsEntities : IbEm.EntityManager {

    #region Constructors

    /// <summary>See <see cref="M:IbEm.EntityManager.#ctor(bool, string, IbEm.EntityServiceOption, string)"/>. </summary>
    public TestsEntities(bool shouldConnect=true, string dataSourceExtension=null, IbEm.EntityServiceOption entityServiceOption=IbEm.EntityServiceOption.UseDefaultService, string compositionContextName=null) : base(shouldConnect, dataSourceExtension, entityServiceOption, compositionContextName) {}

    /// <summary>See <see cref="M:IbEm.EntityManager.#ctor(IbEm.EntityManagerContext)"/>. </summary>
    public TestsEntities(IbEm.EntityManagerContext entityManagerContext) : base(entityManagerContext) {}

    /// <summary>See <see cref="M:IbEm.EntityManager.#ctor(IbEm.EntityManager, bool, string, IbEm.EntityServiceOption, string)"/>. </summary>
    public TestsEntities(IbEm.EntityManager entityManager, bool shouldConnect, string dataSourceExtension=null, IbEm.EntityServiceOption entityServiceOption=IbEm.EntityServiceOption.UseDefaultService, string compositionContextName=null) : base(entityManager, shouldConnect, dataSourceExtension, entityServiceOption, compositionContextName) {}

    /// <summary>See <see cref="M:IbEm.EntityManager.#ctor(IbEm.EntityManager, IbEm.EntityManagerContext)"/>. </summary>
    public TestsEntities(IbEm.EntityManager entityManager, IbEm.EntityManagerContext entityManagerContext=null) : base(entityManager, entityManagerContext) {}

    static TestsEntities() {
      IbEm.EntityRelation.InitializeEntityRelations(System.Reflection.Assembly.GetExecutingAssembly());
    }
    #endregion Constructors

    #region EntityQueries

    /// <summary>Gets the <see cref="T:IbEm.EntityQuery"/> associated with the given EntitySet name. </summary>
    public IbEm.EntityQuery<Prospect> Prospects {
      get { return new IbEm.EntityQuery<Prospect>("Prospects", this); }
    }
    #endregion EntityQueries
  }
  #endregion TestsEntities

  #region Prospect class

  /// <summary>The auto-generated Prospect class. </summary>
  [DataContract(IsReference=true)]
  [IbEm.DataSourceKeyName(@"TestsEntities")]
  [IbEm.DefaultEntitySetName(@"TestsEntities.Prospects")]
  public partial class Prospect : IbEm.Entity {

    /// <summary>Returns the property path for the given expression. </summary>
    /// <example>
    /// Usage:
    /// <code>
    ///    var r = Employee.PathFor(e => e.Manager.City); // returns "Manager.City"
    /// </code>
    /// </example>
    public static string PathFor(System.Linq.Expressions.Expression<System.Func<Prospect, object>> expr) {
      return IbCore.PropertyPath.For<Prospect>(expr);
    }

    #region Data Properties

    /// <summary>Gets or sets the ID. </summary>
    [Key]
    [DataMember]
    [Bindable(true, BindingDirection.TwoWay)]
    [Editable(true)]
    [Display(Name="ID", AutoGenerateField=true)]
    [IbVal.RequiredValueVerifier( ErrorMessageResourceName="Prospect_ID")]
    public System.Guid ID {
      get { return PropertyMetadata.ID.GetValue(this); }
      set { PropertyMetadata.ID.SetValue(this, value); }
    }

    /// <summary>Gets or sets the FirstName. </summary>
    [DataMember]
    [Bindable(true, BindingDirection.TwoWay)]
    [Editable(true)]
    [Display(Name="FirstName", AutoGenerateField=true)]
    [IbVal.StringLengthVerifier(MaxValue=50, IsRequired=true, ErrorMessageResourceName="Prospect_FirstName")]
    public string FirstName {
      get { return PropertyMetadata.FirstName.GetValue(this); }
      set { PropertyMetadata.FirstName.SetValue(this, value); }
    }

    /// <summary>Gets or sets the LastName. </summary>
    [DataMember]
    [Bindable(true, BindingDirection.TwoWay)]
    [Editable(true)]
    [Display(Name="LastName", AutoGenerateField=true)]
    [IbVal.StringLengthVerifier(MaxValue=50, IsRequired=true, ErrorMessageResourceName="Prospect_LastName")]
    public string LastName {
      get { return PropertyMetadata.LastName.GetValue(this); }
      set { PropertyMetadata.LastName.SetValue(this, value); }
    }

    /// <summary>Gets or sets the Address. </summary>
    [DataMember]
    [Bindable(true, BindingDirection.TwoWay)]
    [Editable(true)]
    [Display(Name="Address", AutoGenerateField=true)]
    [IbVal.StringLengthVerifier(MaxValue=50, IsRequired=true, ErrorMessageResourceName="Prospect_Address")]
    public string Address {
      get { return PropertyMetadata.Address.GetValue(this); }
      set { PropertyMetadata.Address.SetValue(this, value); }
    }

    /// <summary>Gets or sets the City. </summary>
    [DataMember]
    [Bindable(true, BindingDirection.TwoWay)]
    [Editable(true)]
    [Display(Name="City", AutoGenerateField=true)]
    [IbVal.StringLengthVerifier(MaxValue=50, IsRequired=true, ErrorMessageResourceName="Prospect_City")]
    public string City {
      get { return PropertyMetadata.City.GetValue(this); }
      set { PropertyMetadata.City.SetValue(this, value); }
    }

    /// <summary>Gets or sets the State. </summary>
    [DataMember]
    [Bindable(true, BindingDirection.TwoWay)]
    [Editable(true)]
    [Display(Name="State", AutoGenerateField=true)]
    [IbVal.StringLengthVerifier(MaxValue=2, IsRequired=true, ErrorMessageResourceName="Prospect_State")]
    public string State {
      get { return PropertyMetadata.State.GetValue(this); }
      set { PropertyMetadata.State.SetValue(this, value); }
    }

    /// <summary>Gets or sets the ZIP. </summary>
    [DataMember]
    [Bindable(true, BindingDirection.TwoWay)]
    [Editable(true)]
    [Display(Name="ZIP", AutoGenerateField=true)]
    [IbVal.StringLengthVerifier(MaxValue=10, IsRequired=true, ErrorMessageResourceName="Prospect_ZIP")]
    public string ZIP {
      get { return PropertyMetadata.ZIP.GetValue(this); }
      set { PropertyMetadata.ZIP.SetValue(this, value); }
    }
    #endregion Data Properties

    #region Navigation properties
    #endregion Navigation properties

    #region EntityProperty definitions
    public partial class PropertyMetadata {

      /// Explicit static constructor ensures static fields are initialized.
      static PropertyMetadata() {}

      /// <summary>The ID <see cref="T:IbEm.DataEntityProperty"/>. </summary>
      public static readonly IbEm.DataEntityProperty<Prospect, System.Guid> ID = new IbEm.DataEntityProperty<Prospect, System.Guid>("ID", false, true, IbEm.ConcurrencyStrategy.None, false, null);

      /// <summary>The FirstName <see cref="T:IbEm.DataEntityProperty"/>. </summary>
      public static readonly IbEm.DataEntityProperty<Prospect, string> FirstName = new IbEm.DataEntityProperty<Prospect, string>("FirstName", false, false, IbEm.ConcurrencyStrategy.None, false, null);

      /// <summary>The LastName <see cref="T:IbEm.DataEntityProperty"/>. </summary>
      public static readonly IbEm.DataEntityProperty<Prospect, string> LastName = new IbEm.DataEntityProperty<Prospect, string>("LastName", false, false, IbEm.ConcurrencyStrategy.None, false, null);

      /// <summary>The Address <see cref="T:IbEm.DataEntityProperty"/>. </summary>
      public static readonly IbEm.DataEntityProperty<Prospect, string> Address = new IbEm.DataEntityProperty<Prospect, string>("Address", false, false, IbEm.ConcurrencyStrategy.None, false, null);

      /// <summary>The City <see cref="T:IbEm.DataEntityProperty"/>. </summary>
      public static readonly IbEm.DataEntityProperty<Prospect, string> City = new IbEm.DataEntityProperty<Prospect, string>("City", false, false, IbEm.ConcurrencyStrategy.None, false, null);

      /// <summary>The State <see cref="T:IbEm.DataEntityProperty"/>. </summary>
      public static readonly IbEm.DataEntityProperty<Prospect, string> State = new IbEm.DataEntityProperty<Prospect, string>("State", false, false, IbEm.ConcurrencyStrategy.None, false, null);

      /// <summary>The ZIP <see cref="T:IbEm.DataEntityProperty"/>. </summary>
      public static readonly IbEm.DataEntityProperty<Prospect, string> ZIP = new IbEm.DataEntityProperty<Prospect, string>("ZIP", false, false, IbEm.ConcurrencyStrategy.None, false, null);
    }
    #endregion EntityProperty definitions

    #region EntityPropertyNames
    public new partial class EntityPropertyNames : IbEm.Entity.EntityPropertyNames {
      public const String ID = "ID";
      public const String FirstName = "FirstName";
      public const String LastName = "LastName";
      public const String Address = "Address";
      public const String City = "City";
      public const String State = "State";
      public const String ZIP = "ZIP";
    }
    #endregion EntityPropertyNames
  }
  #endregion Prospect class

  #region EntityRelations

  /// <summary>
  /// A generated class that returns the relations between entities in this model.
  /// </summary>
  [IbCore.IdeaBladeGuid("4cc6a627-5e68-4bdb-9a58-62a103cd10d1", "2.1.4")]
  public partial class EntityRelations : IbEm.IEntityRelations {

    /// Explicit static constructor ensures static fields are initialized.
    static EntityRelations() {}
  }
  #endregion EntityRelations
}
